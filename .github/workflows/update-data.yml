name: Update Canasta Básica Data

on:
  schedule:
    # Run on the 15th of each month at 10:00 AM UTC
    - cron: "0 10 15 * *"
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  update-data:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Should be much faster with r-lib/actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.4.1"
          use-public-rspm: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          packages: |
            any::shiny
            any::dplyr
            any::readr
            any::ggplot2
            any::lubridate
            any::forcats
            any::stringr
            any::hrbrthemes
            any::bslib
            any::scales
            any::DT
            any::rsconnect
            any::knitr
            any::purrr
            any::tibble
            any::glue
            any::readxl
            any::rvest
            any::cpp11
            any::progress
            any::vroom

      - name: Run data update script
        run: |
          Rscript 02_scrape_auto.R

      - name: Check if data changed
        id: check-data-changes
        run: |
          if [ -f "no_data_changes.flag" ]; then
            echo "data_changed=false" >> $GITHUB_OUTPUT
            echo "No new data found, skipping expensive operations"
          else
            echo "data_changed=true" >> $GITHUB_OUTPUT
            echo "New data found, proceeding with full update"
          fi

      - name: Generate plots (only if data changed)
        if: steps.check-data-changes.outputs.data_changed == 'true'
        run: |
          Rscript 03_plots.R

      - name: Update README (only if data changed)
        if: steps.check-data-changes.outputs.data_changed == 'true'
        run: |
          Rscript -e "knitr::knit('README.Rmd', output = 'README.md')"

      - name: Clean up flag files
        run: |
          # Remove flag files that shouldn't be committed
          rm -f no_data_changes.flag

      - name: Check for changes
        id: verify-changed-files
        run: |
          # Check for actual data/content changes (ignore flag files)
          if [ -n "$(git status --porcelain data/ figures/ README.md 2>/dev/null)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Found changes in data, figures, or README"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes found in data, figures, or README"
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/ figures/ README.md
          git commit -m "Update canasta básica data, plots, and README - $(date +'%Y-%m-%d')"
          git push

      - name: Check if app deployment needed
        id: check-deploy
        run: |
          # Always deploy on scheduled runs to keep app current
          # Always deploy on manual runs (regardless of data changes)
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying: Monthly scheduled run - keeping app current"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying: Manual run - always deploy when manually triggered"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "Skipping deployment: Unknown trigger"
          fi

      - name: Prepare deployment directory
        if: steps.check-deploy.outputs.deploy == 'true'
        run: |
          # Create a completely clean deployment directory with only Shiny app files
          mkdir -p deploy_temp
          cp app.R deploy_temp/
          mkdir -p deploy_temp/data
          cp data/CB_FULL.rds deploy_temp/data/
          
          echo "Prepared minimal deployment directory with only Shiny app files"
          echo "Contents:"
          ls -la deploy_temp/
          ls -la deploy_temp/data

      - name: Setup renv for deployment
        if: steps.check-deploy.outputs.deploy == 'true'
        uses: r-lib/actions/setup-renv@v2
        with:
          working-directory: deploy_temp

      - name: Install rsconnect for deployment
        if: steps.check-deploy.outputs.deploy == 'true'
        run: install.packages("rsconnect")
        shell: Rscript {0}

      - name: Deploy Shiny App
        if: steps.check-deploy.outputs.deploy == 'true'
        env:
          APPNAME: inide-canasta-basica
          ACCOUNT: rrmaximiliano
          SERVER: shinyapps.io
        run: |
          rsconnect::setAccountInfo("${{ secrets.SHINYAPPS_USER }}", "${{ secrets.SHINYAPPS_TOKEN }}", "${{ secrets.SHINYAPPS_SECRET }}")
          rsconnect::deployApp(appDir = "deploy_temp", appName = "${{ env.APPNAME }}", account = "${{ env.ACCOUNT }}", server = "${{ env.SERVER }}")
        shell: Rscript {0}

      - name: Clean up deployment directory
        if: steps.check-deploy.outputs.deploy == 'true'
        run: |
          rm -rf deploy_temp